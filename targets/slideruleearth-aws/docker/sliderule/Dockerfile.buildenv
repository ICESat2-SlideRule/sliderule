FROM amazonlinux:2023

# install build dependencies
RUN dnf update \
  && dnf groupinstall -y "Development Tools" \
  && dnf install -y \
  cmake \
  readline-devel \
  lua-devel \
  openssl-devel \
  libuuid-devel \
  libtiff-devel \
  sqlite-devel \
  curl-devel \
  python-devel \
  meson \
  llvm \
  clang \
  clang-tools-extra \
  cppcheck \
  && dnf clean all \
  && rm -rf /var/cache/yum

# install rapidjson dependency
WORKDIR /
RUN git clone https://github.com/Tencent/rapidjson.git
RUN mkdir -p /build/rapidjson
WORKDIR /build/rapidjson
RUN cmake /rapidjson
RUN make -j8
RUN make install

# install arrow dependency
WORKDIR /
RUN git clone https://github.com/apache/arrow.git
RUN mkdir -p /build/arrow
WORKDIR /build/arrow
RUN cmake /arrow/cpp -DARROW_PARQUET=ON -DARROW_WITH_ZLIB=ON -DARROW_WITH_SNAPPY=ON
RUN make -j8
RUN make install

# install proj9 gdal/pdal dependency
WORKDIR /
RUN git clone https://github.com/OSGeo/PROJ.git
RUN mkdir -p /build/proj9
WORKDIR /build/proj9
RUN cmake /PROJ -DCMAKE_BUILD_TYPE=Release
RUN make -j8
RUN make install
RUN ldconfig

# install geotiff gdal/pdal dependency
WORKDIR /
RUN git clone https://github.com/OSGeo/libgeotiff.git
RUN mkdir -p /build/geotiff
WORKDIR /build/geotiff
RUN cmake /libgeotiff/libgeotiff -DCMAKE_BUILD_TYPE=Release
RUN make -j4
RUN make install
RUN ldconfig

# install geos gdal dependency
WORKDIR /
RUN git clone https://github.com/libgeos/geos.git
RUN mkdir -p /build/geos
WORKDIR /build/geos
RUN cmake /geos -DCMAKE_BUILD_TYPE=Release
RUN make -j8
RUN make install
RUN ldconfig

# install gdal dependency
WORKDIR /
RUN git clone https://github.com/OSGeo/gdal.git
RUN mkdir -p /build/gdal
WORKDIR /build/gdal
RUN cmake /gdal -DCMAKE_BUILD_TYPE=Release -DBUILD_APPS=OFF -DGDAL_USE_SWIG:BOOL=OFF -DBUILD_PYTHON_BINDINGS:BOOL=OFF
RUN make -j8
RUN make install
RUN ldconfig

# install pdal dependency
#WORKDIR /
#RUN git clone https://github.com/PDAL/PDAL.git
#RUN mkdir -p /build/pdal
#WORKDIR /build/pdal
#RUN cmake /PDAL -DCMAKE_BUILD_TYPE=Release
#RUN make -j8
#RUN make install
#RUN ldconfig

# install pistache dependency
WORKDIR /
RUN git clone https://github.com/pistacheio/pistache.git
WORKDIR /pistache
RUN meson setup build
RUN meson install -C build
RUN ldconfig

# configure any new shared libraries
RUN echo "/usr/local/lib64" > /etc/ld.so.conf.d/local.conf && ldconfig

# support interactive mode
WORKDIR /
CMD ["/bin/bash"]